name: Android CI (APK build + Release)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write  # potřebné pro vytvoření Release

jobs:
  build_apk:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Android gradle dir
        id: where
        shell: bash
        run: |
          if [ -f gradlew ]; then
            echo "dir=." >> "$GITHUB_OUTPUT"
          elif [ -f android/gradlew ]; then
            echo "dir=android" >> "$GITHUB_OUTPUT"
          elif [ -f apps/android/gradlew ]; then
            echo "dir=apps/android" >> "$GITHUB_OUTPUT"
          else
            echo "Nenalezen gradlew (., android/, apps/android/)" >&2
            exit 1
          fi
          echo "Using: $(cat $GITHUB_OUTPUT)"

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ${{ steps.where.outputs.dir }}/gradlew

      # (Volitelné) podpis: pokud jsou k dispozici secrets, připrav keystore a gradle properties
      - name: Configure signing (optional)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        working-directory: ${{ steps.where.outputs.dir }}
        shell: bash
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore
          {
            echo "MY_STORE_FILE=release.keystore"
            echo "MY_STORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD"
            echo "MY_KEY_ALIAS=$ANDROID_KEY_ALIAS"
            echo "MY_KEY_PASSWORD=$ANDROID_KEY_PASSWORD"
          } >> gradle.properties
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Assemble Release
        working-directory: ${{ steps.where.outputs.dir }}
        run: ./gradlew --no-daemon clean assembleRelease

      - name: Locate APK(s)
        id: findapk
        shell: bash
        run: |
          MAPK=$(find "${{ steps.where.outputs.dir }}" -type f -path "*/outputs/apk/release/*.apk" | sort -u)
          if [ -z "$MAPK" ]; then
            echo "APK nenalezeno pod */outputs/apk/release" >&2
            find "${{ steps.where.outputs.dir }}" -maxdepth 5 -type f -name "*.apk" -print || true
            exit 1
          fi
          printf "%s\n" $MAPK > apk-list.txt
          echo "count=$(wc -l < apk-list.txt)" >> "$GITHUB_OUTPUT"
          echo "first=$(head -n1 apk-list.txt)" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            apk-list.txt
            ${{ steps.findapk.outputs.first }}
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create GitHub Release (on tag)
    needs: build_apk
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./release-apk

      - name: Show files
        run: ls -lah ./release-apk

      - name: Create Release and upload APK
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-apk/*.apk
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
